#pragma once

#include <iostream>
#include <fstream>
#include <cmath>
#include <string>

// Constants for simulation
double theta0 = 0;
const double TIME_LIMIT = 5.0; // Set to 5 seconds for your benchmarking tests
const double TIME_STEP = 0.01;  // Time step for recording data (e.g., 100 Hz)

// Function prototypes
double get_torque(double theta, double dtheta, double t, double num_e, double w);
double desiredTrajectory(double t);
void simulate_and_save(double num_e, double w, const std::string &weight_label);
void run_simulation(const std::string &weight_label);

// Torque calculation function
double get_torque(double theta, double dtheta, double t, double num_e, double w)
{
    if (theta0 == 0)
    {
        theta0 = theta;
    }

    // Ensure that num_e and w influence the torque dynamically
    double tau = num_e * sin(w * t);  // num_e and w are now part of the torque calculation
    return tau;
}

// Desired trajectory function
double desiredTrajectory(double t)
{
    return 2 * sin(3.6 * t) + 1 * sin(5 * t) + theta0;
}

// Function to simulate and record data for each num_e and w value
void simulate_and_save(double num_e, double w, const std::string &weight_label)
{
    double t = 0.0;
    double theta = 0.0;
    double dtheta = 0.0;
    double prev_theta = 0.0; // Used to calculate angular velocity (dtheta)

    // Prepare filename based on num_e, w, and weight_label
    std::string filename = "./output/data_" + weight_label + "_num_e_" + std::to_string(num_e) + "_w_" + std::to_string(w) + ".txt";
    std::ofstream outfile(filename);

    // Ensure the file is open
    if (!outfile)
    {
        std::cerr << "Error opening file: " << filename << std::endl;
        return;
    }

    std::cout << "Saving data for num_e = " << num_e << " and w = " << w << " to: " << filename << std::endl;

    // Write header for the data file
    outfile << "Time\tTorque (tau)\tAngle (theta)\tAngular Velocity (dtheta)" << std::endl;

    // Run simulation for 5 seconds (or TIME_LIMIT)
    while (t <= TIME_LIMIT)
    {
        // Debug output to track the current time
        std::cout << "Current simulation time: " << t << " seconds" << std::endl;

        // Calculate torque
        double tau = get_torque(theta, dtheta, t, num_e, w);  // num_e and w affect the torque

        // Calculate angle using desired trajectory
        theta = desiredTrajectory(t);

        // Calculate angular velocity (dtheta) using finite difference (theta - previous theta)
        dtheta = (theta - prev_theta) / TIME_STEP; // Change in angle over time step
        prev_theta = theta; // Store current theta for next iteration

        // Write data to file: Time, Torque (tau), Angle (theta), Angular Velocity (dtheta)
        outfile << t << "\t" << tau << "\t" << theta << "\t" << dtheta << std::endl;

        // Increment time
        t += TIME_STEP;

        // Safety break condition to ensure the simulation stops
        if (t > TIME_LIMIT)
        {
            std::cout << "Breaking the loop after reaching the TIME_LIMIT." << std::endl;
            break;
        }
    }

    // Flush the output buffer to ensure all data is written to the file
    outfile.flush();

    // Close the file after simulation
    outfile.close();

    std::cout << "Simulation completed for num_e = " << num_e << " and w = " << w << std::endl;

    // Confirm that the file has been saved
    if (outfile.fail())
    {
        std::cerr << "Error writing data to file: " << filename << std::endl;
    }
    else
    {
        std::cout << "File saved successfully: " << filename << std::endl;
    }
}

// Function to run the simulation for multiple num_e values
void run_simulation(const std::string &weight_label)
{
    // Loop over num_e values from 3 to 15 and a fixed w
    double w = 13.0; // For now, w is fixed, but you can vary it later
    
    for (double num_e = 3.0; num_e <= 15.0; )
    {
        std::cout << "Running simulation for num_e = " << num_e << " and w = " << w << std::endl;

        // Simulate and save data for the current num_e value
        simulate_and_save(num_e, w, weight_label);

        // Increment num_e: 0.5 step until 8, then 1.0 step after
        if (num_e < 8.0)
        {
            num_e += 0.5;
        }
        else
        {
            num_e += 1.0;
        }

        std::cout << "Completed simulation for num_e = " << num_e << std::endl;
    }

    std::cout << "All simulations completed and data saved." << std::endl;
}
